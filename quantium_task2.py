# -*- coding: utf-8 -*-
"""Quantium_task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y78ilhZtYTyqJrafggvOY0pg-BuicyK8

**REQUIREMENTS**


*   Consider the monthly sales experience of each store by looking at:
1. total sales revenue
2. total number of customers
3. average number of transactions per customer
   
* Create a measure to compare different control stores to each of the trial stores.Consider using Pearson correlations or a metric such as a magnitude distance e.g. 1- (Observed distance – minimum distance)/(Maximum distance – minimum distance) as a measure.

* Once you have selected your control stores, compare each trial and control pair during the trial period.
* Test if total sales are significantly different in the trial period and if so, check if the driver of change is more purchasing customers or more purchases per customers etc.
"""

from google.colab import drive
drive.mount('/content/drive')

#importing libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

dataset=pd.read_csv('/content/drive/MyDrive/QVI_data.csv')
dataset.head()

dataset.info()

"""# **SELECTING CONTROL STORES**"""

#Creating a feature to group data in months
dataset['MONTHLY']=[''.join(x.split('-')[0:2]) for x in dataset.DATE]
dataset.head()

dataset.info()

#Converting monthly feature to an 'int' type
dataset['MONTHLY']=pd.to_numeric(dataset['MONTHLY'])
dataset['MONTHLY'].dtypes

"""# ***METRICS***"""

#Total monthly sales in each store
tot_mnthly_sales=dataset.groupby(['STORE_NBR','MONTHLY']).TOT_SALES.sum()
tot_mnthly_sales

#Unique number of monthly customers per store
nbr_customers=dataset.groupby(['STORE_NBR','MONTHLY']).LYLTY_CARD_NBR.nunique()
nbr_customers

#Average monthly transaction per customer in each store
transaction_per_cst=dataset.groupby(['STORE_NBR','MONTHLY']).TXN_ID.nunique()/dataset.groupby(['STORE_NBR','MONTHLY']).LYLTY_CARD_NBR.nunique()
transaction_per_cst

#Average monthly Price per chip for each store
avg_mnthly_price=dataset.groupby(['STORE_NBR','MONTHLY']).TOT_SALES.sum()/dataset.groupby(['STORE_NBR','MONTHLY']).PROD_QTY.sum()
avg_mnthly_price

#monthly Chips per transaction each store
chips_per_transaction=dataset.groupby(['STORE_NBR','MONTHLY']).PROD_QTY.sum()/dataset.groupby(['STORE_NBR','MONTHLY']).TXN_ID.nunique()
chips_per_transaction

#Merging to metrics to a dataframe
monthly_store_metrics=[tot_mnthly_sales,nbr_customers,transaction_per_cst,avg_mnthly_price,chips_per_transaction]
monthly_store_metrics=pd.concat(monthly_store_metrics,join='outer',axis=1)
monthly_store_metrics

#Renaming the columns in dataframe
monthly_store_metrics.rename(columns={'TOT_SALES':'tot_mnthly_sales','LYLTY_CARD_NBR':'mnthly_nbr_of_customers',0:'mnthly_transaction_pr_cstmr',1:'avg_mnthly_price',2:'chips_per_transaction'},inplace=True)
monthly_store_metrics.head()

#Creating a pivot table for monthly transaction entries of stores
non=pd.pivot_table(dataset,index='STORE_NBR',columns='MONTHLY',values='TXN_ID',aggfunc='count')
non

#Identifying missing sequential monthly entries for each store
non.isnull().sum()

#Visualising the missing data entries for each month
import missingno
missingno.matrix(non)

#Identifying the names of the stores with missing monthly entries
non_stores=non[non.isnull().any(axis=1)].index.tolist()
non_stores

#Setting the dataframe to same level of indexing
monthly_store_metrics.reset_index(inplace=True)
monthly_store_metrics

#Dropping the missing entries
monthly_store_metrics=monthly_store_metrics[~monthly_store_metrics['STORE_NBR'].isin(non_stores)]

monthly_store_metrics.isnull().sum()

#Filtering the monthly metrics to a pretrial period i.e. before 201902
pre_trial_metrics=monthly_store_metrics.loc[monthly_store_metrics['MONTHLY'] < 201902,:]
pre_trial_metrics.head()

"""# **Creating a measure to compare different control stores to each of the trial stores**"""

#Creating a function that evaluates correlation between trial stores and other stores
def calculateCorrelation(inputTable, metric, trial_store):
    output = pd.DataFrame({'Store1': [], 'Store2': [], 'Correlation': []})
    a = inputTable.loc[inputTable['STORE_NBR'] == trial_store, metric]
    a.reset_index(drop = True, inplace = True)
    storeNumbers = inputTable['STORE_NBR'].unique()
    for i in storeNumbers:
        b = inputTable.loc[inputTable['STORE_NBR'] == i, metric]
        b.reset_index(drop = True, inplace = True)
        output = output.append({'Store1': trial_store, 'Store2': i, 'Correlation': b.corr(a)}, ignore_index = True)
    return output

# Create another function which calculates a standardised magnitude difference 

def calculateMagnitudeDistance(inputTable, metric, trial_store):
    output = pd.DataFrame({'Store1': [], 'Store2': [], 'Magnitude' : []})
    a = inputTable.loc[inputTable['STORE_NBR'] == trial_store, metric]
    a.reset_index(drop = True, inplace = True)
    storeNumbers = inputTable['STORE_NBR'].unique()
    for i in storeNumbers:
        b = inputTable.loc[inputTable['STORE_NBR'] == i, metric]
        b.reset_index(drop = True, inplace = True)
        c = abs(a-b)
        d = np.mean(1-(c-min(c))/(max(c)-min(c)))
        output = output.append({'Store1': trial_store, 'Store2': i, 'Magnitude': d}, ignore_index = True)
    return output

"""# **Selecting control store for trial store 77**"""

trial_store=77
#Calculating correlation
corr_nbr_sales=calculateCorrelation(pre_trial_metrics,'tot_mnthly_sales',trial_store)
corr_nbr_customers=calculateCorrelation(pre_trial_metrics,'mnthly_nbr_of_customers',trial_store)
#Calculating magnitude distance
magnitude_nbr_sales=calculateMagnitudeDistance(pre_trial_metrics,'tot_mnthly_sales',trial_store)
magnitude_nbr_customers=calculateMagnitudeDistance(pre_trial_metrics,'mnthly_nbr_of_customers',trial_store)

corr_nbr_sales

corr_nbr_customers

magnitude_nbr_sales

magnitude_nbr_customers

#Concatenate sales magnitude and corrrelation
corr_magn_sales=pd.concat([corr_nbr_sales,magnitude_nbr_sales['Magnitude']],axis=1)
corr_magn_sales

#Concatenate customers magnitude and corrrelation
corr_magn_customers=pd.concat([corr_nbr_customers,magnitude_nbr_customers['Magnitude']],axis=1)
corr_magn_customers

# Add an additional column which calculates the weighted average of correlation and magnitude for sales

corr_weight = 0.5
corr_magn_sales['corr_magn_sales_wavg'] = corr_weight * corr_magn_sales['Correlation'] + (1 - corr_weight) * corr_magn_sales['Magnitude']
corr_magn_sales.head()

# Add an additional column which calculates the weighted average of correlation and magnitude for customers
corr_weight = 0.5
corr_magn_customers['corr_magn_customers_wavg'] = corr_weight * corr_magn_customers['Correlation'] + (1 - corr_weight) * corr_magn_customers['Magnitude']
corr_magn_customers.head()

corr_magn_sales.set_index(['Store1', 'Store2'], inplace = True)
corr_magn_customers.set_index(['Store1', 'Store2'], inplace = True)

# Create a new dataframe 'score_Control' which takes the average of 'scoreNSales' and 'scoreNCust'

score_Control = pd.concat([corr_magn_sales['corr_magn_sales_wavg'], corr_magn_customers['corr_magn_customers_wavg']] ,axis = 1)
score_Control

# Add a new column to 'score_Control' which computes the average of 'corr_magn_sales_wavg' and 'corr_magn_customers_wavg'

score_Control['finalControlScore'] = 0.5 * (score_Control['corr_magn_sales_wavg'] + score_Control['corr_magn_customers_wavg'])
score_Control.head()

#Sorting the stores by highest final control score
score_Control.sort_values(by = 'finalControlScore', ascending = False).head()

#Examining the  metrics similarity of store 233 and store 77 prior to the trial period
#Setting control store as 233
control_store=233

past_sales = pre_trial_metrics

# Create a new column within 'past_sales' which categorises store type
store_type = []

for i in past_sales['STORE_NBR']:
    if i == trial_store:
        store_type.append('Trial Store')
    elif i == control_store:
        store_type.append('Control Store')
    else:
        store_type.append('Other Stores')

past_sales['store_type'] = store_type
past_sales.head()

past_sales['store_type'].unique()

past_sales.info()

#Changing format of monthly column from 'int64' to 'datetime object'

past_sales['Transaction_Month'] = pd.to_datetime(past_sales['MONTHLY'].astype(str), format = '%Y%m')
past_sales.head()

past_sales.info()

"""# **Visualisation for *Control Store,Trial Store & Other Stores* using Tot_Sales**"""

#Create dataframes
#Control Store
control_store_sales = past_sales.loc[past_sales['store_type'] == 'Control Store', ['Transaction_Month', 'tot_mnthly_sales']]
control_store_sales.set_index('Transaction_Month', inplace = True)
control_store_sales.rename(columns = {'tot_mnthly_sales ': 'Control_Store_Sales'}, inplace = True)

#Trial Store
trial_store_sales = past_sales.loc[past_sales['store_type'] == 'Trial Store', ['Transaction_Month', 'tot_mnthly_sales']]
trial_store_sales.set_index('Transaction_Month', inplace = True)
trial_store_sales.rename(columns = {'tot_mnthly_sales ': 'Trial_Store_Sales'}, inplace = True)

#Other Stores
other_store_sales = past_sales.loc[past_sales['store_type'] == 'Other Stores', ['Transaction_Month', 'tot_mnthly_sales']]
other_store_sales = pd.DataFrame(other_store_sales.groupby('Transaction_Month').tot_mnthly_sales.mean())
other_store_sales.rename(columns = {'tot_mnthly_sales ': 'Other_Stores_Sales'}, inplace = True)

#Combining the dataframes
combined_stores_sales=pd.concat([control_store_sales,trial_store_sales,other_store_sales],axis=1)
combined_stores_sales

#Plotting combined monthly sales for each store
plt.figure(figsize=(12,7))
plt.plot(combined_stores_sales)
plt.title('Total Monthly Sales for each store')
plt.xlabel('Year')
plt.ylabel('Total Sales')
plt.legend(['Control Store','Trial Store','Other Stores'])

"""# **Visualisation for *Control Store,Trial Store & Other Stores* using mnthly_nbr_of_customers**"""

#Create dataframes
#Control Store
control_store_customers = past_sales.loc[past_sales['store_type'] == 'Control Store', ['Transaction_Month', 'mnthly_nbr_of_customers']]
control_store_customers.set_index('Transaction_Month', inplace = True)
control_store_customers.rename(columns = {'mnthly_nbr_of_customers ': 'Control_Store_Customers'}, inplace = True)

#Trial Store
trial_store_customers = past_sales.loc[past_sales['store_type'] == 'Trial Store', ['Transaction_Month', 'mnthly_nbr_of_customers']]
trial_store_customers.set_index('Transaction_Month', inplace = True)
trial_store_customers.rename(columns = {'mnthly_nbr_of_customers ': 'Trial_Store_Customers'}, inplace = True)

#Other Stores
other_store_customers = past_sales.loc[past_sales['store_type'] == 'Other Stores', ['Transaction_Month', 'mnthly_nbr_of_customers']]
other_store_customers = pd.DataFrame(other_store_customers.groupby('Transaction_Month').mnthly_nbr_of_customers.mean())
other_store_customers.rename(columns = {'mnthly_nbr_of_customers': 'Other_Stores_Customers'}, inplace = True)

#Combining the dataframes
combined_stores_customers=pd.concat([control_store_customers,trial_store_customers,other_store_customers],axis=1)
combined_stores_customers

#Plotting combined number of customers for each store
plt.figure(figsize=(12,7))
plt.plot(combined_stores_customers)
plt.title(' Number Customers per month for each store')
plt.xlabel('Year')
plt.ylabel('Number of Customers')
plt.legend(['Control Store','Trial Store','Other Stores'])

"""# **Pre-trial assessment for store 77**
The trial period goes from the start of February 2019 to end of April 2019. We now want to see if there has been an uplift in overall chip sales.

# **By Sales:**
"""

#Scale pre-trial control sales to match pre-trial trial store sales
#We compute this by dividing sum of 'tot_mnthly_sales' for trial store by sum of 'tot_mnthly_sales' for control store
tot_trial_sales = pre_trial_metrics.loc[pre_trial_metrics['store_type'] == 'Trial Store' , 'tot_mnthly_sales'].sum()
tot_control_sales = pre_trial_metrics.loc[pre_trial_metrics['store_type'] == 'Control Store', 'tot_mnthly_sales'].sum()
Scaling_Factor_Sales =tot_trial_sales / tot_control_sales
Scaling_Factor_Sales

monthly_store_metrics.head()

Scaled_control_sales = monthly_store_metrics
Scaled_control_sales.head()

Scaled_control_sales=Scaled_control_sales.loc[Scaled_control_sales['STORE_NBR'] == 233]
Scaled_control_sales

# Create a column which applies 'Scaling_Factor_Sales' to 'tot_mnthly_sales' column
Scaled_control_sales['Control_Sales']=Scaled_control_sales['tot_mnthly_sales']* Scaling_Factor_Sales
Scaled_control_sales

# Create 'percentage_diff' dataframe
percentage_diff = Scaled_control_sales[['MONTHLY', 'Control_Sales']]
percentage_diff.reset_index(drop = True, inplace = True)

# Concatenate with trial store 'tot_mnthly_sales'
trial_sales = monthly_store_metrics.loc[monthly_store_metrics['STORE_NBR'] == trial_store, 'tot_mnthly_sales']
trial_sales.reset_index(drop = True, inplace = True)
percentage_diff = pd.concat([percentage_diff, trial_sales], axis = 1)
percentage_diff.rename(columns = {'tot_mnthly_sales': 'trial_sales'}, inplace = True)

percentage_diff

# Calculate percentage difference and put it in a new column

percentage_diff['percentage_diff'] = abs(percentage_diff.Control_Sales - percentage_diff.trial_sales) / percentage_diff.Control_Sales
percentage_diff

#Null hypothesis:trial period== pre_trial period
#SD on %diff in pre trial period
from statistics import stdev
std_dev=stdev(percentage_diff.loc[percentage_diff['MONTHLY'] < 201902,'percentage_diff'])
std_dev

#Testing null hypothesis create a new column to compute the t-statistic
percentage_diff['t-calc']=(percentage_diff['percentage_diff'] - 0)/std_dev
percentage_diff.loc[(percentage_diff['MONTHLY'] > 201901) & (percentage_diff['MONTHLY'] < 201905) , 't-calc']

#Degrees of freedom =n-1
#In our case n is the number of months for the pre-trial period which is 8
#So df=7
#Find 95% conf interval with 7 df
from scipy.stats import t 
df=7
t.isf(0.05,df)

#Add a new column to our scaled control sales for the transaction month
Scaled_control_sales['txn_month']=pd.to_datetime(Scaled_control_sales['MONTHLY'].astype(str),format='%Y%m')
Scaled_control_sales

control_store_sales=Scaled_control_sales.loc[:,['txn_month','Control_Sales']]
control_store_sales.set_index('txn_month',inplace=True)
control_store_sales

monthly_store_metrics['txn_month'] = pd.to_datetime(monthly_store_metrics['MONTHLY'].astype(str), format = '%Y%m')
monthly_store_metrics.head()

trial_store_sales = monthly_store_metrics.loc[monthly_store_metrics['STORE_NBR'] == trial_store, ['txn_month', 'tot_mnthly_sales']]
trial_store_sales.set_index('txn_month', inplace = True)
trial_store_sales.rename(columns = {'tot_mnthly_sales': 'Trial_Sales'}, inplace = True)
trial_store_sales

control_store_sales['control 5% conf interval']=control_store_sales['Control_Sales']*(1-std_dev*2)
control_store_sales['control 95% conf interval']=control_store_sales['Control_Sales']*(1+std_dev*2)
control_store_sales

combined_sales=pd.merge(control_store_sales,trial_store_sales,left_index=True,right_index=True)
combined_sales

import matplotlib.dates as mdates
plt.figure(figsize = (12, 7))
plt.plot(combined_sales)
plt.axvspan(*mdates.datestr2num(['2019-02-01', '2019-04-01']), color = 'grey', alpha = 0.2)
plt.legend(['Control_Sales',	'control 5% conf interval',	'control 95% conf interval',	'Trial_Sales'])
plt.xlabel('transaction month')
plt.ylabel('total monthly sales')
plt.title('sales by month')
plt.grid()

"""# **By Customers:**"""

#Scale pre-trial control customers to match pre-trial trial store customers
#We compute this by dividing sum of 'mnthly_nbr_of_customers' for trial store by sum of 'mnthly_nbr_of_customers' for control store
tot_trial_customers = pre_trial_metrics.loc[pre_trial_metrics['store_type'] == 'Trial Store' , 'mnthly_nbr_of_customers'].sum()
tot_control_customers = pre_trial_metrics.loc[pre_trial_metrics['store_type'] == 'Control Store', 'mnthly_nbr_of_customers'].sum()
Scaling_Factor_Customers =tot_trial_customers / tot_control_customers
Scaling_Factor_Customers

Scaled_control_customers = monthly_store_metrics
Scaled_control_customers.head()

Scaled_control_customers=Scaled_control_customers.loc[Scaled_control_customers['STORE_NBR'] == 233]
Scaled_control_customers

# Create a column which applies 'Scaling_Factor_Sales' to 'tot_mnthly_sales' column
Scaled_control_customers['Control_Customers']=Scaled_control_customers['mnthly_nbr_of_customers']* Scaling_Factor_Customers
Scaled_control_customers

Scaled_control_customers['Control_Customers'] = Scaled_control_customers['mnthly_nbr_of_customers'] * Scaling_Factor_Customers
Scaled_control_customers.head()

# Create 'percentage_diff' dataframe
percentage_diff = Scaled_control_customers[['MONTHLY', 'Control_Customers']]
percentage_diff.reset_index(drop = True, inplace = True)

# Concatenate with trial store 'mnthly_nbr_customers'
trial_customers = monthly_store_metrics.loc[monthly_store_metrics['STORE_NBR'] == trial_store, 'mnthly_nbr_of_customers']
trial_customers.reset_index(drop = True, inplace = True)
percentage_diff = pd.concat([percentage_diff, trial_customers], axis = 1)
percentage_diff.rename(columns = {'mnthly_nbr_of_customers': 'trial_customers'}, inplace = True)

percentage_diff

# Calculate percentage difference and put it in a new column

percentage_diff['percentage_diff'] = abs(percentage_diff.Control_Customers - percentage_diff.trial_customers) / percentage_diff.Control_Customers
percentage_diff

#Null hypothesis:trial period== pre_trial period
#SD on %diff in pre trial period
from statistics import stdev
std_dev=stdev(percentage_diff.loc[percentage_diff['MONTHLY'] < 201902,'percentage_diff'])
std_dev

#Testing null hypothesis create a new column to compute the t-statistic
percentage_diff['t-calc']=(percentage_diff['percentage_diff'] - 0)/std_dev
percentage_diff.loc[(percentage_diff['MONTHLY'] > 201901) & (percentage_diff['MONTHLY'] < 201905) , 't-calc']

#Degrees of freedom =n-1
#In our case n is the number of months for the pre-trial period which is 8
#So df=7
#Find 95% conf interval with 7 df
from scipy.stats import t 
df=7
t.isf(0.05,df)

#Add a new column to our scaled control sales for the transaction month
Scaled_control_customers['txn_month']=pd.to_datetime(Scaled_control_customers['MONTHLY'].astype(str),format='%Y%m')
Scaled_control_customers

control_store_customers=Scaled_control_customers.loc[:,['txn_month','Control_Customers']]
control_store_customers.set_index('txn_month',inplace=True)
control_store_customers

monthly_store_metrics['txn_month'] = pd.to_datetime(monthly_store_metrics['MONTHLY'].astype(str), format = '%Y%m')
monthly_store_metrics.head()

trial_store_customers = monthly_store_metrics.loc[monthly_store_metrics['STORE_NBR'] == trial_store, ['txn_month', 'mnthly_nbr_of_customers']]
trial_store_customers.set_index('txn_month', inplace = True)
trial_store_customers.rename(columns = {'mnthly_nbr_of_customers': 'Trial_Customers'}, inplace = True)
trial_store_customers

control_store_customers['control 5% conf interval']=control_store_customers['Control_Customers']*(1-std_dev*2)
control_store_customers['control 95% conf interval']=control_store_customers['Control_Customers']*(1+std_dev*2)
control_store_customers

combined_customers=pd.merge(control_store_customers,trial_store_customers,left_index=True,right_index=True)
combined_customers

import matplotlib.dates as mdates
plt.figure(figsize = (12, 7))
plt.plot(combined_customers)
plt.axvspan(*mdates.datestr2num(['2019-02-01', '2019-04-01']), color = 'grey', alpha = 0.2)
plt.legend(['Control_Customers',	'control 5% conf interval',	'control 95% conf interval',	'Trial_Customers'])
plt.xlabel('transaction month')
plt.ylabel(' monthly number of customers')
plt.title('Total Number of customers per month')
plt.grid()

"""# **Selecting control store for store trial 86**"""

trial_store=86
#Calculating correlation
corr_nbr_sales=calculateCorrelation(pre_trial_metrics,'tot_mnthly_sales',trial_store)
corr_nbr_customers=calculateCorrelation(pre_trial_metrics,'mnthly_nbr_of_customers',trial_store)
#Calculating magnitude distance
magnitude_nbr_sales=calculateMagnitudeDistance(pre_trial_metrics,'tot_mnthly_sales',trial_store)
magnitude_nbr_customers=calculateMagnitudeDistance(pre_trial_metrics,'mnthly_nbr_of_customers',trial_store)

corr_nbr_sales

corr_nbr_customers

magnitude_nbr_sales

magnitude_nbr_customers

#Concatenate sales magnitude and corrrelation
corr_magn_sales=pd.concat([corr_nbr_sales,magnitude_nbr_sales['Magnitude']],axis=1)
corr_magn_sales

#Concatenate customers magnitude and corrrelation
corr_magn_customers=pd.concat([corr_nbr_customers,magnitude_nbr_customers['Magnitude']],axis=1)
corr_magn_customers

# Add an additional column which calculates the weighted average of correlation and magnitude for sales

corr_weight = 0.5
corr_magn_sales['corr_magn_sales_wavg'] = corr_weight * corr_magn_sales['Correlation'] + (1 - corr_weight) * corr_magn_sales['Magnitude']
corr_magn_sales.head()

# Add an additional column which calculates the weighted average of correlation and magnitude for customers
corr_weight = 0.5
corr_magn_customers['corr_magn_customers_wavg'] = corr_weight * corr_magn_customers['Correlation'] + (1 - corr_weight) * corr_magn_customers['Magnitude']
corr_magn_customers.head()

corr_magn_sales.set_index(['Store1', 'Store2'], inplace = True)
corr_magn_customers.set_index(['Store1', 'Store2'], inplace = True)

# Create a new dataframe 'score_Control' which takes the average of 'scoreNSales' and 'scoreNCust'

score_Control = pd.concat([corr_magn_sales['corr_magn_sales_wavg'], corr_magn_customers['corr_magn_customers_wavg']] ,axis = 1)
score_Control

# Add a new column to 'score_Control' which computes the average of 'corr_magn_sales_wavg' and 'corr_magn_customers_wavg'

score_Control['finalControlScore'] = 0.5 * (score_Control['corr_magn_sales_wavg'] + score_Control['corr_magn_customers_wavg'])
score_Control.head()

#Sorting the stores by highest final control score
score_Control.sort_values(by = 'finalControlScore', ascending = False).head()

#Examining the  metrics similarity of store 155 and store 86 prior to the trial period
#Setting control store as 155
control_store=155

past_sales = pre_trial_metrics

# Create a new column within 'past_sales' which categorises store type
store_type = []

for i in past_sales['STORE_NBR']:
    if i == trial_store:
        store_type.append('Trial Store')
    elif i == control_store:
        store_type.append('Control Store')
    else:
        store_type.append('Other Stores')

past_sales['store_type'] = store_type
past_sales.head()

past_sales['store_type'].unique()

past_sales.info()

#Changing format of monthly column from 'int64' to 'datetime object'

past_sales['Transaction_Month'] = pd.to_datetime(past_sales['MONTHLY'].astype(str), format = '%Y%m')
past_sales.head()

past_sales.info()

#Create dataframes
#Control Store
control_store_sales = past_sales.loc[past_sales['store_type'] == 'Control Store', ['Transaction_Month', 'tot_mnthly_sales']]
control_store_sales.set_index('Transaction_Month', inplace = True)
control_store_sales.rename(columns = {'tot_mnthly_sales ': 'Control_Store_Sales'}, inplace = True)

#Trial Store
trial_store_sales = past_sales.loc[past_sales['store_type'] == 'Trial Store', ['Transaction_Month', 'tot_mnthly_sales']]
trial_store_sales.set_index('Transaction_Month', inplace = True)
trial_store_sales.rename(columns = {'tot_mnthly_sales ': 'Trial_Store_Sales'}, inplace = True)

#Other Stores
other_store_sales = past_sales.loc[past_sales['store_type'] == 'Other Stores', ['Transaction_Month', 'tot_mnthly_sales']]
other_store_sales = pd.DataFrame(other_store_sales.groupby('Transaction_Month').tot_mnthly_sales.mean())
other_store_sales.rename(columns = {'tot_mnthly_sales ': 'Other_Stores_Sales'}, inplace = True)

#Combining the dataframes
combined_stores_sales=pd.concat([control_store_sales,trial_store_sales,other_store_sales],axis=1)
combined_stores_sales

#Plotting combined monthly sales for each store
plt.figure(figsize=(12,7))
plt.plot(combined_stores_sales)
plt.title('Total Monthly Sales for each store')
plt.xlabel('Year')
plt.ylabel('Total Sales')
plt.legend(['Control Store','Trial Store','Other Stores'])



"""# **Visualisation for *Control Store,Trial Store & Other Stores* using mnthly_nbr_of_customers**"""

#Create dataframes
#Control Store
control_store_customers = past_sales.loc[past_sales['store_type'] == 'Control Store', ['Transaction_Month', 'mnthly_nbr_of_customers']]
control_store_customers.set_index('Transaction_Month', inplace = True)
control_store_customers.rename(columns = {'mnthly_nbr_of_customers ': 'Control_Store_Customers'}, inplace = True)

#Trial Store
trial_store_customers = past_sales.loc[past_sales['store_type'] == 'Trial Store', ['Transaction_Month', 'mnthly_nbr_of_customers']]
trial_store_customers.set_index('Transaction_Month', inplace = True)
trial_store_customers.rename(columns = {'mnthly_nbr_of_customers ': 'Trial_Store_Customers'}, inplace = True)

#Other Stores
other_store_customers = past_sales.loc[past_sales['store_type'] == 'Other Stores', ['Transaction_Month', 'mnthly_nbr_of_customers']]
other_store_customers = pd.DataFrame(other_store_customers.groupby('Transaction_Month').mnthly_nbr_of_customers.mean())
other_store_customers.rename(columns = {'mnthly_nbr_of_customers': 'Other_Stores_Customers'}, inplace = True)

#Combining the dataframes
combined_stores_customers=pd.concat([control_store_customers,trial_store_customers,other_store_customers],axis=1)
combined_stores_customers

#Plotting combined number of customers for each store
plt.figure(figsize=(12,7))
plt.plot(combined_stores_customers)
plt.title(' Number Customers per month for each store')
plt.xlabel('Year')
plt.ylabel('Number of Customers')
plt.legend(['Control Store','Trial Store','Other Stores'])

"""# **Pre-trial assessment for store 86**
The trial period goes from the start of February 2019 to end of April 2019. We now want to see if there has been an uplift in overall chip sales.

# **By Sales:**
"""

#Scale pre-trial control sales to match pre-trial trial store sales
#We compute this by dividing sum of 'tot_mnthly_sales' for trial store by sum of 'tot_mnthly_sales' for control store
tot_trial_sales = pre_trial_metrics.loc[pre_trial_metrics['store_type'] == 'Trial Store' , 'tot_mnthly_sales'].sum()
tot_control_sales = pre_trial_metrics.loc[pre_trial_metrics['store_type'] == 'Control Store', 'tot_mnthly_sales'].sum()
Scaling_Factor_Sales =tot_trial_sales / tot_control_sales
Scaling_Factor_Sales

monthly_store_metrics.head()

Scaled_control_sales = monthly_store_metrics
Scaled_control_sales.head()

Scaled_control_sales=Scaled_control_sales.loc[Scaled_control_sales['STORE_NBR'] == 155]
Scaled_control_sales

# Create a column which applies 'Scaling_Factor_Sales' to 'tot_mnthly_sales' column
Scaled_control_sales['Control_Sales']=Scaled_control_sales['tot_mnthly_sales']* Scaling_Factor_Sales
Scaled_control_sales

# Create 'percentage_diff' dataframe
percentage_diff = Scaled_control_sales[['MONTHLY', 'Control_Sales']]
percentage_diff.reset_index(drop = True, inplace = True)

# Concatenate with trial store 'tot_mnthly_sales'
trial_sales = monthly_store_metrics.loc[monthly_store_metrics['STORE_NBR'] == trial_store, 'tot_mnthly_sales']
trial_sales.reset_index(drop = True, inplace = True)
percentage_diff = pd.concat([percentage_diff, trial_sales], axis = 1)
percentage_diff.rename(columns = {'tot_mnthly_sales': 'trial_sales'}, inplace = True)

percentage_diff

# Calculate percentage difference and put it in a new column

percentage_diff['percentage_diff'] = abs(percentage_diff.Control_Sales - percentage_diff.trial_sales) / percentage_diff.Control_Sales
percentage_diff

#Null hypothesis:trial period== pre_trial period
#SD on %diff in pre trial period
from statistics import stdev
std_dev=stdev(percentage_diff.loc[percentage_diff['MONTHLY'] < 201902,'percentage_diff'])
std_dev

#Testing null hypothesis create a new column to compute the t-statistic
percentage_diff['t-calc']=(percentage_diff['percentage_diff'] - 0)/std_dev
percentage_diff.loc[(percentage_diff['MONTHLY'] > 201901) & (percentage_diff['MONTHLY'] < 201905) , 't-calc']

#Degrees of freedom =n-1
#In our case n is the number of months for the pre-trial period which is 8
#So df=7
#Find 95% conf interval with 7 df
from scipy.stats import t 
df=7
t.isf(0.05,df)

#Add a new column to our scaled control sales for the transaction month
Scaled_control_sales['txn_month']=pd.to_datetime(Scaled_control_sales['MONTHLY'].astype(str),format='%Y%m')
Scaled_control_sales

control_store_sales=Scaled_control_sales.loc[:,['txn_month','Control_Sales']]
control_store_sales.set_index('txn_month',inplace=True)
control_store_sales

monthly_store_metrics['txn_month'] = pd.to_datetime(monthly_store_metrics['MONTHLY'].astype(str), format = '%Y%m')
monthly_store_metrics.head()

trial_store_sales = monthly_store_metrics.loc[monthly_store_metrics['STORE_NBR'] == trial_store, ['txn_month', 'tot_mnthly_sales']]
trial_store_sales.set_index('txn_month', inplace = True)
trial_store_sales.rename(columns = {'tot_mnthly_sales': 'Trial_Sales'}, inplace = True)
trial_store_sales

control_store_sales['control 5% conf interval']=control_store_sales['Control_Sales']*(1-std_dev*2)
control_store_sales['control 95% conf interval']=control_store_sales['Control_Sales']*(1+std_dev*2)
control_store_sales

combined_sales=pd.merge(control_store_sales,trial_store_sales,left_index=True,right_index=True)
combined_sales

import matplotlib.dates as mdates
plt.figure(figsize = (12, 8))
plt.plot(combined_sales)
plt.axvspan(*mdates.datestr2num(['2019-02-01', '2019-04-01']), color = 'grey', alpha = 0.2)
plt.legend(['Control_Sales',	'control 5% conf interval',	'control 95% conf interval',	'Trial_Sales'])
plt.ylim((0, 1400))
plt.xlabel('transaction month')
plt.ylabel('total monthly sales')
plt.title('sales by month')
plt.grid()

"""# **By Customers:**"""

#Scale pre-trial control customers to match pre-trial trial store customers
#We compute this by dividing sum of 'mnthly_nbr_of_customers' for trial store by sum of 'mnthly_nbr_of_customers' for control store
tot_trial_customers = pre_trial_metrics.loc[pre_trial_metrics['store_type'] == 'Trial Store' , 'mnthly_nbr_of_customers'].sum()
tot_control_customers = pre_trial_metrics.loc[pre_trial_metrics['store_type'] == 'Control Store', 'mnthly_nbr_of_customers'].sum()
Scaling_Factor_Customers =tot_trial_customers / tot_control_customers
Scaling_Factor_Customers

Scaled_control_customers = monthly_store_metrics
Scaled_control_customers.head()

Scaled_control_customers=Scaled_control_customers.loc[Scaled_control_customers['STORE_NBR'] == 155]
Scaled_control_customers

# Create a column which applies 'Scaling_Factor_Sales' to 'tot_mnthly_sales' column
Scaled_control_customers['Control_Customers']=Scaled_control_customers['mnthly_nbr_of_customers']* Scaling_Factor_Customers
Scaled_control_customers

Scaled_control_customers['Control_Customers'] = Scaled_control_customers['mnthly_nbr_of_customers'] * Scaling_Factor_Customers
Scaled_control_customers.head()

# Create 'percentage_diff' dataframe
percentage_diff = Scaled_control_customers[['MONTHLY', 'Control_Customers']]
percentage_diff.reset_index(drop = True, inplace = True)

# Concatenate with trial store 'mnthly_nbr_customers'
trial_customers = monthly_store_metrics.loc[monthly_store_metrics['STORE_NBR'] == trial_store, 'mnthly_nbr_of_customers']
trial_customers.reset_index(drop = True, inplace = True)
percentage_diff = pd.concat([percentage_diff, trial_customers], axis = 1)
percentage_diff.rename(columns = {'mnthly_nbr_of_customers': 'trial_customers'}, inplace = True)

percentage_diff

# Calculate percentage difference and put it in a new column

percentage_diff['percentage_diff'] = abs(percentage_diff.Control_Customers - percentage_diff.trial_customers) / percentage_diff.Control_Customers
percentage_diff

#Null hypothesis:trial period== pre_trial period
#SD on %diff in pre trial period
from statistics import stdev
std_dev=stdev(percentage_diff.loc[percentage_diff['MONTHLY'] < 201902,'percentage_diff'])
std_dev

#Testing null hypothesis create a new column to compute the t-statistic
percentage_diff['t-calc']=(percentage_diff['percentage_diff'] - 0)/std_dev
percentage_diff.loc[(percentage_diff['MONTHLY'] > 201901) & (percentage_diff['MONTHLY'] < 201905) , 't-calc']

#Degrees of freedom =n-1
#In our case n is the number of months for the pre-trial period which is 8
#So df=7
#Find 95% conf interval with 7 df
from scipy.stats import t 
df=7
t.isf(0.05,df)

#Add a new column to our scaled control sales for the transaction month
Scaled_control_customers['txn_month']=pd.to_datetime(Scaled_control_customers['MONTHLY'].astype(str),format='%Y%m')
Scaled_control_customers

control_store_customers=Scaled_control_customers.loc[:,['txn_month','Control_Customers']]
control_store_customers.set_index('txn_month',inplace=True)
control_store_customers

monthly_store_metrics['txn_month'] = pd.to_datetime(monthly_store_metrics['MONTHLY'].astype(str), format = '%Y%m')
monthly_store_metrics.head()

trial_store_customers = monthly_store_metrics.loc[monthly_store_metrics['STORE_NBR'] == 86, ['txn_month', 'mnthly_nbr_of_customers']]
trial_store_customers.set_index('txn_month', inplace = True)
trial_store_customers.rename(columns = {'mnthly_nbr_of_customers': 'Trial_Customers'}, inplace = True)
trial_store_customers

control_store_customers['control 5% conf interval']=control_store_customers['Control_Customers']*(1-std_dev*2)
control_store_customers['control 95% conf interval']=control_store_customers['Control_Customers']*(1+std_dev*2)
control_store_customers

combined_customers=pd.merge(control_store_customers,trial_store_customers,left_index=True,right_index=True)
combined_customers

import matplotlib.dates as mdates
plt.figure(figsize = (12, 7))
plt.plot(combined_customers)
plt.ylim((0, 130))
plt.axvspan(*mdates.datestr2num(['2019-02-01', '2019-04-01']), color = 'grey', alpha = 0.2)
plt.legend(['Control_Customers',	'control 5% conf interval',	'control 95% conf interval',	'Trial_Customers'])
plt.xlabel('transaction month')
plt.ylabel(' monthly number of customers')
plt.title('Total Number of customers per month')
plt.grid()



"""# **Selecting control store for trial store 88**"""

trial_store=88
#Calculating correlation
corr_nbr_sales=calculateCorrelation(pre_trial_metrics,'tot_mnthly_sales',trial_store)
corr_nbr_customers=calculateCorrelation(pre_trial_metrics,'mnthly_nbr_of_customers',trial_store)
#Calculating magnitude distance
magnitude_nbr_sales=calculateMagnitudeDistance(pre_trial_metrics,'tot_mnthly_sales',trial_store)
magnitude_nbr_customers=calculateMagnitudeDistance(pre_trial_metrics,'mnthly_nbr_of_customers',trial_store)

corr_nbr_sales

corr_nbr_customers

magnitude_nbr_sales

magnitude_nbr_customers

#Concatenate sales magnitude and corrrelation
corr_magn_sales=pd.concat([corr_nbr_sales,magnitude_nbr_sales['Magnitude']],axis=1)
corr_magn_sales

#Concatenate customers magnitude and corrrelation
corr_magn_customers=pd.concat([corr_nbr_customers,magnitude_nbr_customers['Magnitude']],axis=1)
corr_magn_customers

# Add an additional column which calculates the weighted average of correlation and magnitude for sales

corr_weight = 0.5
corr_magn_sales['corr_magn_sales_wavg'] = corr_weight * corr_magn_sales['Correlation'] + (1 - corr_weight) * corr_magn_sales['Magnitude']
corr_magn_sales.head()

# Add an additional column which calculates the weighted average of correlation and magnitude for customers
corr_weight = 0.5
corr_magn_customers['corr_magn_customers_wavg'] = corr_weight * corr_magn_customers['Correlation'] + (1 - corr_weight) * corr_magn_customers['Magnitude']
corr_magn_customers.head()

corr_magn_sales.set_index(['Store1', 'Store2'], inplace = True)
corr_magn_customers.set_index(['Store1', 'Store2'], inplace = True)

# Create a new dataframe 'score_Control' which takes the average of 'scoreNSales' and 'scoreNCust'

score_Control = pd.concat([corr_magn_sales['corr_magn_sales_wavg'], corr_magn_customers['corr_magn_customers_wavg']] ,axis = 1)
score_Control

# Add a new column to 'score_Control' which computes the average of 'corr_magn_sales_wavg' and 'corr_magn_customers_wavg'

score_Control['finalControlScore'] = 0.5 * (score_Control['corr_magn_sales_wavg'] + score_Control['corr_magn_customers_wavg'])
score_Control.head()

#Sorting the stores by highest final control score
score_Control.sort_values(by = 'finalControlScore', ascending = False).head()

#Examining the  metrics similarity of store 178 and store 88 prior to the trial period
#Setting control store as 178
control_store=178

past_sales = pre_trial_metrics

# Create a new column within 'past_sales' which categorises store type
store_type = []

for i in past_sales['STORE_NBR']:
    if i == trial_store:
        store_type.append('Trial Store')
    elif i == control_store:
        store_type.append('Control Store')
    else:
        store_type.append('Other Stores')

past_sales['store_type'] = store_type
past_sales.head()

past_sales['store_type'].unique()

past_sales.info()

#Changing format of monthly column from 'int64' to 'datetime object'

past_sales['Transaction_Month'] = pd.to_datetime(past_sales['MONTHLY'].astype(str), format = '%Y%m')
past_sales.head()

past_sales.info()

"""# **Visualisation for *Control Store,Trial Store* & *Other Stores using Tot_Sales**"""

#Create dataframes
#Control Store
control_store_sales = past_sales.loc[past_sales['store_type'] == 'Control Store', ['Transaction_Month', 'tot_mnthly_sales']]
control_store_sales.set_index('Transaction_Month', inplace = True)
control_store_sales.rename(columns = {'tot_mnthly_sales ': 'Control_Store_Sales'}, inplace = True)

#Trial Store
trial_store_sales = past_sales.loc[past_sales['store_type'] == 'Trial Store', ['Transaction_Month', 'tot_mnthly_sales']]
trial_store_sales.set_index('Transaction_Month', inplace = True)
trial_store_sales.rename(columns = {'tot_mnthly_sales ': 'Trial_Store_Sales'}, inplace = True)

#Other Stores
other_store_sales = past_sales.loc[past_sales['store_type'] == 'Other Stores', ['Transaction_Month', 'tot_mnthly_sales']]
other_store_sales = pd.DataFrame(other_store_sales.groupby('Transaction_Month').tot_mnthly_sales.mean())
other_store_sales.rename(columns = {'tot_mnthly_sales ': 'Other_Stores_Sales'}, inplace = True)

#Combining the dataframes
combined_stores_sales=pd.concat([control_store_sales,trial_store_sales,other_store_sales],axis=1)
combined_stores_sales

#Plotting combined monthly sales for each store
plt.figure(figsize=(12,7))
plt.plot(combined_stores_sales)
plt.title('Total Monthly Sales for each store')
plt.xlabel('Year')
plt.ylabel('Total Sales')
plt.legend(['Control Store','Trial Store','Other Stores'])

"""#  **Visualisation for Control_Store,Trial_Store & Other_Stores using mnthly_nbr_of_customers** """

#Create dataframes
#Control Store
control_store_customers = past_sales.loc[past_sales['store_type'] == 'Control Store', ['Transaction_Month', 'mnthly_nbr_of_customers']]
control_store_customers.set_index('Transaction_Month', inplace = True)
control_store_customers.rename(columns = {'mnthly_nbr_of_customers ': 'Control_Store_Customers'}, inplace = True)

#Trial Store
trial_store_customers = past_sales.loc[past_sales['store_type'] == 'Trial Store', ['Transaction_Month', 'mnthly_nbr_of_customers']]
trial_store_customers.set_index('Transaction_Month', inplace = True)
trial_store_customers.rename(columns = {'mnthly_nbr_of_customers ': 'Trial_Store_Customers'}, inplace = True)

#Other Stores
other_store_customers = past_sales.loc[past_sales['store_type'] == 'Other Stores', ['Transaction_Month', 'mnthly_nbr_of_customers']]
other_store_customers = pd.DataFrame(other_store_customers.groupby('Transaction_Month').mnthly_nbr_of_customers.mean())
other_store_customers.rename(columns = {'mnthly_nbr_of_customers': 'Other_Stores_Customers'}, inplace = True)

#Combining the dataframes
combined_stores_customers=pd.concat([control_store_customers,trial_store_customers,other_store_customers],axis=1)
combined_stores_customers

#Plotting combined number of customers for each store
plt.figure(figsize=(12,7))
plt.plot(combined_stores_customers)
plt.title(' Number Customers per month for each store')
plt.xlabel('Year')
plt.ylabel('Number of Customers')
plt.legend(['Control Store','Trial Store','Other Stores'])

"""# **Pre-trial assessment for store 88**
The trial period goes from the start of February 2019 to end of April 2019. We now want to see if there has been an uplift in overall chip sales.

# **By Sales:**
"""

#Scale pre-trial control sales to match pre-trial trial store sales
#We compute this by dividing sum of 'tot_mnthly_sales' for trial store by sum of 'tot_mnthly_sales' for control store
tot_trial_sales = pre_trial_metrics.loc[pre_trial_metrics['store_type'] == 'Trial Store' , 'tot_mnthly_sales'].sum()
tot_control_sales = pre_trial_metrics.loc[pre_trial_metrics['store_type'] == 'Control Store', 'tot_mnthly_sales'].sum()
Scaling_Factor_Sales =tot_trial_sales / tot_control_sales
Scaling_Factor_Sales

monthly_store_metrics.head()

Scaled_control_sales = monthly_store_metrics
Scaled_control_sales.head()

Scaled_control_sales=Scaled_control_sales.loc[Scaled_control_sales['STORE_NBR'] == 178]
Scaled_control_sales

# Create a column which applies 'Scaling_Factor_Sales' to 'tot_mnthly_sales' column
Scaled_control_sales['Control_Sales']=Scaled_control_sales['tot_mnthly_sales']* Scaling_Factor_Sales
Scaled_control_sales

# Create 'percentage_diff' dataframe
percentage_diff = Scaled_control_sales[['MONTHLY', 'Control_Sales']]
percentage_diff.reset_index(drop = True, inplace = True)

# Concatenate with trial store 'tot_mnthly_sales'
trial_sales = monthly_store_metrics.loc[monthly_store_metrics['STORE_NBR'] == trial_store, 'tot_mnthly_sales']
trial_sales.reset_index(drop = True, inplace = True)
percentage_diff = pd.concat([percentage_diff, trial_sales], axis = 1)
percentage_diff.rename(columns = {'tot_mnthly_sales': 'trial_sales'}, inplace = True)

percentage_diff

# Calculate percentage difference and put it in a new column

percentage_diff['percentage_diff'] = abs(percentage_diff.Control_Sales - percentage_diff.trial_sales) / percentage_diff.Control_Sales
percentage_diff

#Null hypothesis:trial period== pre_trial period
#SD on %diff in pre trial period
from statistics import stdev
std_dev=stdev(percentage_diff.loc[percentage_diff['MONTHLY'] < 201902,'percentage_diff'])
std_dev

#Testing null hypothesis create a new column to compute the t-statistic
percentage_diff['t-calc']=(percentage_diff['percentage_diff'] - 0)/std_dev
percentage_diff.loc[(percentage_diff['MONTHLY'] > 201901) & (percentage_diff['MONTHLY'] < 201905) , 't-calc']

#Degrees of freedom =n-1
#In our case n is the number of months for the pre-trial period which is 8
#So df=7
#Find 95% conf interval with 7 df
from scipy.stats import t 
df=7
t.isf(0.05,df)

#Add a new column to our scaled control sales for the transaction month
Scaled_control_sales['txn_month']=pd.to_datetime(Scaled_control_sales['MONTHLY'].astype(str),format='%Y%m')
Scaled_control_sales

control_store_sales=Scaled_control_sales.loc[:,['txn_month','Control_Sales']]
control_store_sales.set_index('txn_month',inplace=True)
control_store_sales

monthly_store_metrics['txn_month'] = pd.to_datetime(monthly_store_metrics['MONTHLY'].astype(str), format = '%Y%m')
monthly_store_metrics.head()

trial_store_sales = monthly_store_metrics.loc[monthly_store_metrics['STORE_NBR'] == trial_store, ['txn_month', 'tot_mnthly_sales']]
trial_store_sales.set_index('txn_month', inplace = True)
trial_store_sales.rename(columns = {'tot_mnthly_sales': 'Trial_Sales'}, inplace = True)
trial_store_sales

control_store_sales['control 5% conf interval']=control_store_sales['Control_Sales']*(1-std_dev*2)
control_store_sales['control 95% conf interval']=control_store_sales['Control_Sales']*(1+std_dev*2)
control_store_sales

combined_sales=pd.merge(control_store_sales,trial_store_sales,left_index=True,right_index=True)
combined_sales

import matplotlib.dates as mdates
plt.figure(figsize = (12, 7))
plt.plot(combined_sales)
plt.axvspan(*mdates.datestr2num(['2019-02-01', '2019-04-01']), color = 'grey', alpha = 0.2)
plt.legend(['Control_Sales',	'control 5% conf interval',	'control 95% conf interval',	'Trial_Sales'])
plt.xlabel('transaction month')
plt.ylabel('total monthly sales')
plt.title('sales by month')
plt.grid()

"""# **By Customers:**"""

#Scale pre-trial control customers to match pre-trial trial store customers
#We compute this by dividing sum of 'mnthly_nbr_of_customers' for trial store by sum of 'mnthly_nbr_of_customers' for control store
tot_trial_customers = pre_trial_metrics.loc[pre_trial_metrics['store_type'] == 'Trial Store' , 'mnthly_nbr_of_customers'].sum()
tot_control_customers = pre_trial_metrics.loc[pre_trial_metrics['store_type'] == 'Control Store', 'mnthly_nbr_of_customers'].sum()
Scaling_Factor_Customers =tot_trial_customers / tot_control_customers
Scaling_Factor_Customers

Scaled_control_customers = monthly_store_metrics
Scaled_control_customers.head()

Scaled_control_customers=Scaled_control_customers.loc[Scaled_control_customers['STORE_NBR'] == 178]
Scaled_control_customers

# Create a column which applies 'Scaling_Factor_Sales' to 'tot_mnthly_sales' column
Scaled_control_customers['Control_Customers']=Scaled_control_customers['mnthly_nbr_of_customers']* Scaling_Factor_Customers
Scaled_control_customers

Scaled_control_customers['Control_Customers'] = Scaled_control_customers['mnthly_nbr_of_customers'] * Scaling_Factor_Customers
Scaled_control_customers.head()

# Create 'percentage_diff' dataframe
percentage_diff = Scaled_control_customers[['MONTHLY', 'Control_Customers']]
percentage_diff.reset_index(drop = True, inplace = True)

# Concatenate with trial store 'mnthly_nbr_customers'
trial_customers = monthly_store_metrics.loc[monthly_store_metrics['STORE_NBR'] == trial_store, 'mnthly_nbr_of_customers']
trial_customers.reset_index(drop = True, inplace = True)
percentage_diff = pd.concat([percentage_diff, trial_customers], axis = 1)
percentage_diff.rename(columns = {'mnthly_nbr_of_customers': 'trial_customers'}, inplace = True)

percentage_diff

# Calculate percentage difference and put it in a new column

percentage_diff['percentage_diff'] = abs(percentage_diff.Control_Customers - percentage_diff.trial_customers) / percentage_diff.Control_Customers
percentage_diff

#Null hypothesis:trial period== pre_trial period
#SD on %diff in pre trial period
from statistics import stdev
std_dev=stdev(percentage_diff.loc[percentage_diff['MONTHLY'] < 201902,'percentage_diff'])
std_dev

#Testing null hypothesis create a new column to compute the t-statistic
percentage_diff['t-calc']=(percentage_diff['percentage_diff'] - 0)/std_dev
percentage_diff.loc[(percentage_diff['MONTHLY'] > 201901) & (percentage_diff['MONTHLY'] < 201905) , 't-calc']

#Degrees of freedom =n-1
#In our case n is the number of months for the pre-trial period which is 8
#So df=7
#Find 95% conf interval with 7 df
from scipy.stats import t 
df=7
t.isf(0.05,df)

#Add a new column to our scaled control sales for the transaction month
Scaled_control_customers['txn_month']=pd.to_datetime(Scaled_control_customers['MONTHLY'].astype(str),format='%Y%m')
Scaled_control_customers

control_store_customers=Scaled_control_customers.loc[:,['txn_month','Control_Customers']]
control_store_customers.set_index('txn_month',inplace=True)
control_store_customers

monthly_store_metrics['txn_month'] = pd.to_datetime(monthly_store_metrics['MONTHLY'].astype(str), format = '%Y%m')
monthly_store_metrics.head()

trial_store_customers = monthly_store_metrics.loc[monthly_store_metrics['STORE_NBR'] == trial_store, ['txn_month', 'mnthly_nbr_of_customers']]
trial_store_customers.set_index('txn_month', inplace = True)
trial_store_customers.rename(columns = {'mnthly_nbr_of_customers': 'Trial_Customers'}, inplace = True)
trial_store_customers

control_store_customers['control 5% conf interval']=control_store_customers['Control_Customers']*(1-std_dev*2)
control_store_customers['control 95% conf interval']=control_store_customers['Control_Customers']*(1+std_dev*2)
control_store_customers

combined_customers=pd.merge(control_store_customers,trial_store_customers,left_index=True,right_index=True)
combined_customers

import matplotlib.dates as mdates
plt.figure(figsize = (12, 7))

plt.plot(combined_customers)

plt.axvspan(*mdates.datestr2num(['2019-02-01', '2019-04-01']), color = 'grey', alpha = 0.2)
plt.legend(['Control_Customers',	'control 5% conf interval',	'control 95% conf interval',	'Trial_Customers'])
plt.xlabel('transaction month')
plt.ylabel(' monthly number of customers')
plt.ylim((0, 160))
plt.title('Total Number of customers per month')
plt.grid()



"""# **Conclusion**

It looks like the number of customers is significantly higher in all of the three months of the trial period.
"""